<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>12306(一)</title>
      <link href="/posts/12306/12306(%E4%B8%80)/"/>
      <url>/posts/12306/12306(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<p>本项目为<a href="https://github.com/Wangbangc/12306">开源项目</a></p><h1 id="包"><a href="#包" class="headerlink" title="包"></a>包</h1><p>先了解相关包，对项目有个整体的了解。<br><img src="/img/12306/package.png" alt="包相关说明" /></p><p>配置相关看 <a href="https://nageoffer.com/12306/environment-configuration/">官方环境搭建</a> 就行了</p><h1 id="站点查询相关"><a href="#站点查询相关" class="headerlink" title="站点查询相关"></a>站点查询相关</h1><p>因为 <code>查询大多都类似</code> ，比较复杂的就是首页进行车票查询，所以再这里只写一个</p><p>接口 <code>/api/ticket-service/ticket/query</code> ，查询车票(默认访问查询 <code>北京到杭州的车票</code> )访问首页即可触发</p><p>大致流程: 请求首先会在网关中被拦截，然后通过黑白名单进行过滤，请求再到相应服务端进行处理，对于上述车票的查询，<code>网关路由到服务端后首先查询缓存，查询不到就查询数据库，并将相关数据存储在缓存中</code>。</p><p>具体流程如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//服务端接口</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/api/ticket-service/ticket/query&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;TicketPageQueryRespDTO&gt; pageListTicketQuery</span><br><span class="line"><span class="comment">// 参数为 两站台缩写</span></span><br><span class="line">(TicketPageQueryReqDTO requestParam) &#123;</span><br><span class="line">    <span class="keyword">return</span> Results.success(</span><br><span class="line">        ticketService.pageListTicketQueryV1(requestParam));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入到实现层后，第一行代码就是利用 <code>责任链模式</code>，首先 <code>对参数进行校验</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 责任链模式 验证城市名称是否存在、不存在加载缓存以及出发日期不能小于当前日期等等</span></span><br><span class="line">ticketPageQueryAbstractChainContext.handler</span><br><span class="line"><span class="comment">// 第一个参数是标记，用于区分不同的责任链</span></span><br><span class="line"><span class="comment">// 第二个是要进行校验的参数</span></span><br><span class="line">(TicketChainMarkEnum.TRAIN_QUERY_FILTER.name(), requestParam);</span><br></pre></td></tr></table></figure><p>再进入到 <code>ticketPageQueryAbstractChainContext</code> 时，首先我们要看一个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个单接口， <code>文中用了大量的 @FunctionalInterface 来标识接口，我能想到的目的就是规范开发， 只定义一个接口增加灵活性，方便扩展 ? </code></p><p>接下来再进入 <code>ticketPageQueryAbstractChainContext</code> 查看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">AbstractChainContext</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, List&lt;AbstractChainHandler&gt;&gt; abstractChainHandlerContainer </span><br><span class="line">    = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 责任链组件执行</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mark         责任链组件标识</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> requestParam 请求参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handler</span><span class="params">(String mark, T requestParam)</span> &#123;</span><br><span class="line">        List&lt;AbstractChainHandler&gt; abstractChainHandlers </span><br><span class="line">        = abstractChainHandlerContainer.get(mark);</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(abstractChainHandlers)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(String</span><br><span class="line">            .format(<span class="string">&quot;[%s] Chain of Responsibility ID is undefined.&quot;</span>, mark));</span><br><span class="line">        &#125;</span><br><span class="line">        abstractChainHandlers.</span><br><span class="line">        forEach(each -&gt; each.handler(requestParam));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在初始化时就进行装载， 我给忘了在哪里加载来着。chao TODO</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Map&lt;String, AbstractChainHandler&gt; chainFilterMap = ApplicationContextHolder</span><br><span class="line">                .getBeansOfType(AbstractChainHandler.class);</span><br><span class="line">        chainFilterMap.forEach((beanName, bean) -&gt; &#123;</span><br><span class="line">            List&lt;AbstractChainHandler&gt; abstractChainHandlers = </span><br><span class="line">            abstractChainHandlerContainer.get(bean.mark());</span><br><span class="line">            <span class="keyword">if</span> (CollectionUtils.isEmpty(abstractChainHandlers)) &#123;</span><br><span class="line">                abstractChainHandlers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            abstractChainHandlers.add(bean);</span><br><span class="line">            List&lt;AbstractChainHandler&gt; actualAbstractChainHandlers = </span><br><span class="line">            abstractChainHandlers.stream()</span><br><span class="line">                    .sorted(Comparator.comparing(Ordered::getOrder))</span><br><span class="line">                    .collect(Collectors.toList());</span><br><span class="line">            abstractChainHandlerContainer.put(bean.mark(), actualAbstractChainHandlers);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上述最重要的是 <code>abstractChainHandlers.forEach(each -&gt; each.handler(requestParam));</code><br>将参数依次传到责任链进行相关校验</p><p><code>之后基本上都是查询数据库写入缓存的操作，我只写逻辑，没怎么给注释</code> </p><p><code>感觉代码很美</code>，可以多看看写法，很帅</p><p>校验完成后尝试从 Redis 缓存中进行获取两地信息，如果获取不到就加锁用 <code>双重校验锁(锁前查询一次，锁后再查询一次)</code> 进行 数据库获取 <code>所有站台缩写与城市之间的映射关系</code> 查询并插入 缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Object&gt; stationDetails = stringRedisTemplate.opsForHash()</span><br><span class="line">        .multiGet(REGION_TRAIN_STATION_MAPPING,</span><br><span class="line">                Lists.newArrayList(requestParam.getFromStation(), requestParam.getToStation()));</span><br><span class="line"><span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> stationDetails.stream().filter(Objects::isNull).count();</span><br><span class="line"><span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="type">RLock</span> <span class="variable">lock</span> <span class="operator">=</span> redissonClient.getLock(LOCK_REGION_TRAIN_STATION_MAPPING);</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        stationDetails = stringRedisTemplate.opsForHash()</span><br><span class="line">                .multiGet(REGION_TRAIN_STATION_MAPPING, Lists.newArrayList(requestParam.getFromStation(), requestParam.getToStation()));</span><br><span class="line">        count = stationDetails.stream().filter(Objects::isNull).count();</span><br><span class="line">        <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            List&lt;StationDO&gt; stationDOList = stationMapper.selectList(Wrappers.emptyWrapper());</span><br><span class="line">            Map&lt;String, String&gt; regionTrainStationMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            stationDOList.forEach(each -&gt; regionTrainStationMap.put(each.getCode(), each.getRegionName()));</span><br><span class="line">            stringRedisTemplate.opsForHash().putAll(REGION_TRAIN_STATION_MAPPING, regionTrainStationMap);</span><br><span class="line">            stationDetails = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            stationDetails.add(regionTrainStationMap.get(requestParam.getFromStation()));</span><br><span class="line">            stationDetails.add(regionTrainStationMap.get(requestParam.getToStation()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取到数据后，再通过同样的方式，获取到 <code>所有北京到杭州站点的车票</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">List&lt;TicketListDTO&gt; seatResults = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="type">String</span> <span class="variable">buildRegionTrainStationHashKey</span> <span class="operator">=</span> String.format(REGION_TRAIN_STATION, stationDetails.get(<span class="number">0</span>), stationDetails.get(<span class="number">1</span>));</span><br><span class="line">Map&lt;Object, Object&gt; regionTrainStationAllMap = stringRedisTemplate.opsForHash().entries(buildRegionTrainStationHashKey);</span><br><span class="line"><span class="keyword">if</span> (MapUtil.isEmpty(regionTrainStationAllMap)) &#123;</span><br><span class="line">    <span class="type">RLock</span> <span class="variable">lock</span> <span class="operator">=</span> redissonClient.getLock(LOCK_REGION_TRAIN_STATION);</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        regionTrainStationAllMap = stringRedisTemplate.opsForHash().entries(buildRegionTrainStationHashKey);</span><br><span class="line">        <span class="keyword">if</span> (MapUtil.isEmpty(regionTrainStationAllMap)) &#123;</span><br><span class="line">            LambdaQueryWrapper&lt;TrainStationRelationDO&gt; queryWrapper = Wrappers.lambdaQuery(TrainStationRelationDO.class)</span><br><span class="line">                    .eq(TrainStationRelationDO::getStartRegion, stationDetails.get(<span class="number">0</span>))</span><br><span class="line">                    .eq(TrainStationRelationDO::getEndRegion, stationDetails.get(<span class="number">1</span>));</span><br><span class="line">            List&lt;TrainStationRelationDO&gt; trainStationRelationList = trainStationRelationMapper.selectList(queryWrapper);</span><br><span class="line">            <span class="keyword">for</span> (TrainStationRelationDO each : trainStationRelationList) &#123;</span><br><span class="line">                <span class="type">TrainDO</span> <span class="variable">trainDO</span> <span class="operator">=</span> distributedCache.safeGet(</span><br><span class="line">                        TRAIN_INFO + each.getTrainId(),</span><br><span class="line">                        TrainDO.class,</span><br><span class="line">                        () -&gt; trainMapper.selectById(each.getTrainId()),</span><br><span class="line">                        ADVANCE_TICKET_DAY,</span><br><span class="line">                        TimeUnit.DAYS);</span><br><span class="line">                <span class="type">TicketListDTO</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TicketListDTO</span>();</span><br><span class="line">                result.setTrainId(String.valueOf(trainDO.getId()));</span><br><span class="line">                result.setTrainNumber(trainDO.getTrainNumber());</span><br><span class="line">                result.setDepartureTime(convertDateToLocalTime(each.getDepartureTime(), <span class="string">&quot;HH:mm&quot;</span>));</span><br><span class="line">                result.setArrivalTime(convertDateToLocalTime(each.getArrivalTime(), <span class="string">&quot;HH:mm&quot;</span>));</span><br><span class="line">                result.setDuration(DateUtil.calculateHourDifference(each.getDepartureTime(), each.getArrivalTime()));</span><br><span class="line">                result.setDeparture(each.getDeparture());</span><br><span class="line">                result.setArrival(each.getArrival());</span><br><span class="line">                result.setDepartureFlag(each.getDepartureFlag());</span><br><span class="line">                result.setArrivalFlag(each.getArrivalFlag());</span><br><span class="line">                result.setTrainType(trainDO.getTrainType());</span><br><span class="line">                result.setTrainBrand(trainDO.getTrainBrand());</span><br><span class="line">                <span class="keyword">if</span> (StrUtil.isNotBlank(trainDO.getTrainTag())) &#123;</span><br><span class="line">                    result.setTrainTags(StrUtil.split(trainDO.getTrainTag(), <span class="string">&quot;,&quot;</span>));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">long</span> <span class="variable">betweenDay</span> <span class="operator">=</span> cn.hutool.core.date.DateUtil.betweenDay(each.getDepartureTime(), each.getArrivalTime(), <span class="literal">false</span>);</span><br><span class="line">                result.setDaysArrived((<span class="type">int</span>) betweenDay);</span><br><span class="line">                result.setSaleStatus(<span class="keyword">new</span> <span class="title class_">Date</span>().after(trainDO.getSaleTime()) ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">                result.setSaleTime(convertDateToLocalTime(trainDO.getSaleTime(), <span class="string">&quot;MM-dd HH:mm&quot;</span>));</span><br><span class="line">                seatResults.add(result);</span><br><span class="line">                regionTrainStationAllMap.put(CacheUtil.buildKey(String.valueOf(each.getTrainId()), each.getDeparture(), each.getArrival()), JSON.toJSONString(result));</span><br><span class="line">            &#125;</span><br><span class="line">            stringRedisTemplate.opsForHash().putAll(buildRegionTrainStationHashKey, regionTrainStationAllMap);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再获取到 <code>车票余额、车座次相对应的价格</code> 并进行缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">seatResults = CollUtil.isEmpty(seatResults)</span><br><span class="line">                ? regionTrainStationAllMap.values().stream().map(each -&gt; JSON.parseObject(each.toString(), TicketListDTO.class)).toList()</span><br><span class="line">                : seatResults;</span><br><span class="line">        seatResults = seatResults.stream().sorted(<span class="keyword">new</span> <span class="title class_">TimeStringComparator</span>()).toList();</span><br><span class="line">        <span class="keyword">for</span> (TicketListDTO each : seatResults) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">trainStationPriceStr</span> <span class="operator">=</span> distributedCache.safeGet(</span><br><span class="line">                    String.format(TRAIN_STATION_PRICE, each.getTrainId(), each.getDeparture(), each.getArrival()),</span><br><span class="line">                    String.class,</span><br><span class="line">                    () -&gt; &#123;</span><br><span class="line">                        LambdaQueryWrapper&lt;TrainStationPriceDO&gt; trainStationPriceQueryWrapper = Wrappers.lambdaQuery(TrainStationPriceDO.class)</span><br><span class="line">                                .eq(TrainStationPriceDO::getDeparture, each.getDeparture())</span><br><span class="line">                                .eq(TrainStationPriceDO::getArrival, each.getArrival())</span><br><span class="line">                                .eq(TrainStationPriceDO::getTrainId, each.getTrainId());</span><br><span class="line">                        <span class="keyword">return</span> JSON.toJSONString(trainStationPriceMapper.selectList(trainStationPriceQueryWrapper));</span><br><span class="line">                    &#125;,</span><br><span class="line">                    ADVANCE_TICKET_DAY,</span><br><span class="line">                    TimeUnit.DAYS</span><br><span class="line">            );</span><br><span class="line">            List&lt;TrainStationPriceDO&gt; trainStationPriceDOList = JSON.parseArray(trainStationPriceStr, TrainStationPriceDO.class);</span><br><span class="line">            List&lt;SeatClassDTO&gt; seatClassList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            trainStationPriceDOList.forEach(item -&gt; &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">seatType</span> <span class="operator">=</span> String.valueOf(item.getSeatType());</span><br><span class="line">                <span class="type">String</span> <span class="variable">keySuffix</span> <span class="operator">=</span> StrUtil.join(<span class="string">&quot;_&quot;</span>, each.getTrainId(), item.getDeparture(), item.getArrival());</span><br><span class="line">                <span class="type">Object</span> <span class="variable">quantityObj</span> <span class="operator">=</span> stringRedisTemplate.opsForHash().get(TRAIN_STATION_REMAINING_TICKET + keySuffix, seatType);</span><br><span class="line">                <span class="type">int</span> <span class="variable">quantity</span> <span class="operator">=</span> Optional.ofNullable(quantityObj)</span><br><span class="line">                        .map(Object::toString)</span><br><span class="line">                        .map(Integer::parseInt)</span><br><span class="line">                        .orElseGet(() -&gt; &#123;</span><br><span class="line">                            Map&lt;String, String&gt; seatMarginMap = seatMarginCacheLoader.load(String.valueOf(each.getTrainId()), seatType, item.getDeparture(), item.getArrival());</span><br><span class="line">                            <span class="keyword">return</span> Optional.ofNullable(seatMarginMap.get(String.valueOf(item.getSeatType()))).map(Integer::parseInt).orElse(<span class="number">0</span>);</span><br><span class="line">                        &#125;);</span><br><span class="line">                seatClassList.add(<span class="keyword">new</span> <span class="title class_">SeatClassDTO</span>(item.getSeatType(), quantity, <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(item.getPrice()).divide(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;100&quot;</span>), <span class="number">1</span>, RoundingMode.HALF_UP), <span class="literal">false</span>));</span><br><span class="line">            &#125;);</span><br><span class="line">            each.setSeatClassList(seatClassList);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>到这里，基本上就结束了，中间三个代码段都是 对车票部分进行查询、缓存，还有一部分不好的地方，我找个时间补上。</p><h1 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h1><p>这个项目查询车票流程基本这样，对于 <code>网关</code> 实现方式多，本项目是通过继承 <code>AbstractGatewayFilterFactory</code> ，主要重写 <code>apply</code> 方法实现。</p><p>有很多代码写得很美，<br>像一开始的责任链模式进行参数校验，责任链实现在包<code>frameworks.designpattern</code>(前几太看的时候我还记得是如何加载的，现在我已经忘了T_T)<br>然后就是用 <code>@FunctionalInterface</code>只写一个接口，文中用了很多，举个例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;StationQueryRespDTO&gt; <span class="title function_">listAllStation</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> distributedCache.safeGet(</span><br><span class="line">            STATION_ALL,</span><br><span class="line">            List.class,</span><br><span class="line">            () -&gt; BeanUtil.convert(stationMapper.selectList(Wrappers.emptyWrapper()), StationQueryRespDTO.class),</span><br><span class="line">            ADVANCE_TICKET_DAY,</span><br><span class="line">            TimeUnit.DAYS</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 <code>() -&gt; BeanUtil.convert(stationMapper.selectList(Wrappers.emptyWrapper()), StationQueryRespDTO.class)</code> 是实现 <code>CacheLoader</code> 的 <code>load()</code> 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CacheLoader</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载缓存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    T <span class="title function_">load</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>这有什么好处呢？</code></p><p>我们写这样一个接口，<code>通过函数式编程方式，直接写上实现。不用再依次写具体实现，然后再调用，极大增强复用性，查这个写一个实现，查那个写一个实现</code></p><p>雅，太雅了！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 12306 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10.17</title>
      <link href="/posts/10-17/"/>
      <url>/posts/10-17/</url>
      
        <content type="html"><![CDATA[<h1 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h1><p>先给看看工位。</p><img src="/img/10-17/gw.jpg" alt="自己的工位"/><p>经理给我配的旧的苹果，俺不会用，就给我配了Windows。果然 <code>野猪吃不了细康</code></p><p>工作一个多月了,按考勤算钱，第一个月又遇到国庆、中秋，那几天真希望自己天天上班，狠狠赚。</p><p>这个公司很小， <code>真正在干事儿的就6个人!其中还包括经理、包括我在内的三个实习生</code> 。但人家是19年就建立的。还有一位4年老员工。</p><p>第一天进公司，就收到通知被重庆德勤给录取了。但是我才租上房啊，还大老远从学校跑来，又坐车回去。<br><img src="/img/10-17/dqlq.jpg" alt="整洋文"><br>这俩工资是一样多的，但我不想多花父母的钱就没回重庆。爸给我说让我回去，我骗他说被撤回了。(小声bb一下，我也受到一些网络影响，说德勤分配完全看运气，有些好有些差。有大佬，有导师但完全看 <code>运气</code> )</p><p>也想过回重庆现在是不是已经有更好发展，是个高楼白领了，哈哈哈。</p><p>无所谓，在哪都是学。</p><p>我这儿的经理人挺好，说话都很和气，对实习生也不错，是个 <code>技术佬</code> 。我对这样的人啊，真是像个小孩一样。这几天犯了一个错，在人面前像个沙贝一样扭扭捏捏的，真想回去抽自己一个大嘴巴子。</p><p>前几天安排写一个脚本，从数据库上把数据扒出来，因为阿里那个数据库好像是只能上传，不能保存。<br>那是我第一个活儿，写得老快了， <code>感觉自己改的代码优雅丝滑</code>（现在想想就是傻呗迷之自信） ，越看越觉得自己屌，后面发现一些错误，又修修补补，又加上日志查看进度、配置文件。又这又那，感觉代码优雅得一批。<br>结果前天同事提醒我这个脚本有个BUG，某些情况会少数据。</p><p>哈哈哈， <code>结果我就急了</code> 。也没敢问经理，也没敢告诉他，因为我觉得这太easy了， <code>索性就把查到的2/3数据全删了</code> ，重头开始。(狂删自己巴掌，下次删片，别删数据)</p><p>哈哈哈，后端开发成全栈开发，让我页面美化，这真比不过同事，就让我很焦虑。</p><p>今天早上5点才睡着，8点多又拖着疲惫身躯上班了。</p><p>今天索性一问，说没事儿，让我接着查。<br>我都删了，拿啥查，又没给他说已经把数据删了。<br>结果他来问还差多少，我就实话实说了(为啥不早给他说)</p><p>生活，就是生下来，然后活着。</p><p>我现在就想挣钱，挣大把的钱。</p><p>听一首 DAY 1 好好睡一觉吧。接下来就好好工作，好好生活。</p>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>本站</title>
      <link href="/posts/%E6%9C%AC%E7%AB%99/"/>
      <url>/posts/%E6%9C%AC%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<h1 id="关于本站"><a href="#关于本站" class="headerlink" title="关于本站"></a>关于本站</h1><p>其实很早之前一直想创建一个属于自己的博客。</p><p>从自己学习Java后端开始，就尝试过自己自研一个，后面发现自己写一个博客的工作量非常大，自己的前端学得也只是逻辑方面，对于美化方面做得很烂。</p><p>很早就了解到了有现成博客模板，折腾一下发现大量配置又给搁置了。</p><p>这一次终于下定决心了，一定要弄一个出来。</p><p>2024年10月13日</p>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
